def commonSettings(nameStr: String) = Seq(
  name := nameStr,
  version := Settings.versions.project,
  scalaVersion := Settings.versions.scala,
  organization := "com.simianquant",
  scalacOptions ++= List(
    ("-Xlint:adapted-args,nullary-unit,inaccessible,nullary-override,infer-any,doc-detached,private-shadow," +
      "type-parameter-shadow,poly-implicit-overload,option-implicit,delayedinit-select,by-name-right-associative," +
      "package-object-classes,unsound-match,stars-align,constant"),
    "-Ywarn-unused:imports,patvars,privates,locals",
    "-opt:l:method",
    "-Ywarn-unused-import",
    "-deprecation",
    "-unchecked",
    "-explaintypes",
    "-encoding",
    "UTF-8",
    "-feature",
    "-Xlog-reflective-calls",
    "-Ywarn-inaccessible",
    "-Ywarn-infer-any",
    "-Ywarn-nullary-override",
    "-Ywarn-nullary-unit",
    "-Xfuture"
  ),
  licenses := Seq(("BSD New", url("http://opensource.org/licenses/BSD-3-Clause")))
)

lazy val macros = project
  .in(file("macros"))
  .settings(commonSettings("sbt-jni-macros"))
  .settings(
    libraryDependencies ++= Seq(
      "org.scala-lang" % "scala-compiler" % Settings.versions.scala % Provided,
      "org.scala-lang" % "scala-reflect" % Settings.versions.scala,
    ),
    addCompilerPlugin("org.scalamacros" % "paradise" % Settings.versions.macroParadise cross CrossVersion.full),
    unmanagedSourceDirectories in Compile += baseDirectory.value.getParentFile / "util" / "src"
  )
  .disablePlugins(ScriptedPlugin)

lazy val plugin = project
  .in(file("plugin"))
  .settings(commonSettings("sbt-jni"))
  .settings(
    // sbtPlugin := true,
    publishMavenStyle := true,
    libraryDependencies += "org.ow2.asm" % "asm" % Settings.versions.asm,
    unmanagedSourceDirectories in Compile += baseDirectory.value.getParentFile / "util" / "src",
    sourceGenerators in Compile += Def.task {
      val src = s"""|/* Generated by sbt */
                    |package ch.jodersky.sbt.jni
                    |
                    |private[jni] object ProjectVersion {
                    |  final val MacrosParadise = "${Settings.versions.macroParadise}"
                    |  final val Macros = "${Settings.versions.project}"
                    |}
                    |""".stripMargin
      val file = sourceManaged.value / "ch" / "jodersky" / "sbt" / "jni" / "ProjectVersion.scala"
      IO.write(file, src)
      Seq(file)
    }.taskValue,
    scriptedLaunchOpts := Seq(
      "-Dplugin.version=" + Settings.versions.project,
      "-XX:MaxPermSize=256m",
      "-Xmx2g",
      "-Xss2m"
    ),
    scriptedBufferLog := false
  )
  .enablePlugins(SbtPlugin, ScriptedPlugin)

lazy val root = project
  .in(file("."))
  .settings(commonSettings("root"))
  .settings(
    publish := {},
    publishLocal := {},
    // make sbt-pgp happy
    publishTo := Some(Resolver.file("Unused transient repository", target.value / "unusedrepo")),
    addCommandAlias("test-plugin", ";macros/publishLocal;scripted")
  )
  .aggregate(macros, plugin)
